Index: EShopSolution.Application/Catalog/Products/ManageProductService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Net.Http.Headers;\r\nusing System.Threading.Tasks;\r\nusing EShopSolution.Application.Common;\r\nusing EShopSolution.Application.Extension.Query;\r\nusing EShopSolution.Data.Context;\r\nusing EShopSolution.Data.Entities;\r\nusing EShopSolution.Entities.Exceptions;\r\nusing EshopSolution.PageModel.Catalog.Product;\r\nusing EshopSolution.PageModel.Catalog.Product.Manage;\r\nusing EshopSolution.PageModel.Common;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace EShopSolution.Application.Catalog.Products\r\n{\r\n    public class ManageProductService : IManageProductService\r\n    {\r\n        private readonly EShopDbContext db;\r\n        private readonly IStorageService storageService;\r\n        public ManageProductService(EShopDbContext db,IStorageService fileStorageService)\r\n        {\r\n            this.db = db;\r\n            this.storageService = fileStorageService;\r\n        }\r\n\r\n        public async Task AddViewCount(int productId)\r\n        {\r\n            var product = await db.Products.FirstOrDefaultAsync(x => x.Id == productId);\r\n            product.ViewCount += 1;\r\n\r\n            await db.SaveChangesAsync();\r\n        }\r\n\r\n        public async Task<int> Create(ProductCreateRequest request)\r\n        {\r\n            var product = new Product\r\n            {\r\n                Price = request.Price,\r\n                OriginalPrice = request.OriginalPrice,\r\n                Stock = request.Stock,\r\n                ViewCount = 0,\r\n                DateCreated = DateTime.Now,\r\n                ProductTranslations = new List<ProductTranslation>\r\n                {\r\n                    new ProductTranslation\r\n                    {\r\n                        LanguageId = request.LanguageId,\r\n                        Name = request.Name,\r\n                        Description = request.Description,\r\n                        SeoDescription = request.SeoDescription,\r\n                        SeoAlias = request.SeoAlias,\r\n                        SeoTitle = request.SeoTitle\r\n                    }\r\n                }\r\n            };\r\n            \r\n            // save image\r\n            if (request.ThumbnailImage != null)\r\n            {\r\n                // product.Ima\r\n            }\r\n            db.Products.Add(product);\r\n\r\n            return await db.SaveChangesAsync();\r\n        }\r\n\r\n        public async Task<int> Delete(int productId)\r\n        {\r\n            var product = await db.Products.FirstOrDefaultAsync(x => x.Id == productId);\r\n\r\n            if (product == null)\r\n                throw new EShopException($\"Product with {productId} can not found!\");\r\n\r\n            db.Products.Remove(product);\r\n\r\n            return await db.SaveChangesAsync();\r\n        }\r\n\r\n        public async Task<PagedResult<ProductViewModel>> GetAllPaging(\r\n            GetProductPagingRequest request\r\n        )\r\n        {\r\n            // query and include loading\r\n            var query = db.Products.AsQueryable();\r\n\r\n            query = query\r\n                .Include(q => q.ProductTranslations)\r\n                .Include(q => q.ProductInCategories)\r\n                .ThenInclude(pc => pc.Category);\r\n\r\n            if (!string.IsNullOrWhiteSpace(request.Keyword))\r\n            {\r\n                var searchPattern = \"%\" + request.Keyword.Trim() + \"%\";\r\n                query = query.Where(\r\n                    q =>\r\n                        q.ProductTranslations.Any(\r\n                            t =>\r\n                                t.Name.ToLower().Contains(request.Keyword.Trim().ToLower())\r\n                                || EF.Functions.Like(t.Name, searchPattern)\r\n                        )\r\n                );\r\n            }\r\n\r\n            if (request.CategoryIds?.Any() == true)\r\n                query = query.Where(\r\n                    q =>\r\n                        q.ProductInCategories.Any(pc => request.CategoryIds.Contains(pc.CategoryId))\r\n                );\r\n\r\n            // count\r\n            var total = await query.CountAsync();\r\n\r\n            // pagination\r\n            query = query.Pagination(request.PageSize, request.PageIndex);\r\n\r\n            // mapping\r\n            var products = await query\r\n                .Select(\r\n                    q =>\r\n                        new\r\n                        {\r\n                            q.Id,\r\n                            q.Price,\r\n                            q.OriginalPrice,\r\n                            q.Stock,\r\n                            q.ViewCount,\r\n                            CreateDate = q.DateCreated,\r\n                            ProductTranslation = q.ProductTranslations.FirstOrDefault(\r\n                                x =>\r\n                                    string.Equals(\r\n                                        x.LanguageId,\r\n                                        request.LanguageId,\r\n                                        StringComparison.OrdinalIgnoreCase\r\n                                    )\r\n                            )\r\n                        }\r\n                )\r\n                .Select(\r\n                    q =>\r\n                        new ProductViewModel\r\n                        {\r\n                            Id = q.Id,\r\n                            Price = q.Price,\r\n                            OriginalPrice = q.OriginalPrice,\r\n                            Stock = q.Stock,\r\n                            ViewCount = q.ViewCount,\r\n                            CreateDate = q.CreateDate,\r\n                            Name = q.ProductTranslation.Name,\r\n                            Description = q.ProductTranslation.Description,\r\n                            Details = q.ProductTranslation.Details,\r\n                            SeoAlias = q.ProductTranslation.SeoAlias,\r\n                            SeoTitle = q.ProductTranslation.SeoTitle,\r\n                            SeoDescription = q.ProductTranslation.SeoDescription\r\n                        }\r\n                )\r\n                .ToListAsync();\r\n\r\n            var pagedResult = new PagedResult<ProductViewModel>\r\n            {\r\n                Total = total,\r\n                Items = products\r\n            };\r\n\r\n            return pagedResult;\r\n        }\r\n\r\n        public async Task<int> Update(ProductUpdateRequest request)\r\n        {\r\n            var product = await db.Products.FirstOrDefaultAsync(x => x.Id == request.Id);\r\n\r\n            var productTranslation =\r\n                await db.ProductTranslations.FirstOrDefaultAsync(\r\n                    q => q.ProductId == request.Id && q.LanguageId == request.LanguageId\r\n                );\r\n\r\n            if (product == null || productTranslation == null)\r\n                throw new EShopException(\"Product can not found!\");\r\n\r\n            productTranslation.Name = request.Name;\r\n            productTranslation.SeoAlias = request.SeoAlias;\r\n            productTranslation.SeoTitle = request.SeoTitle;\r\n            productTranslation.SeoDescription = request.SeoDescription;\r\n            productTranslation.Description = request.Description;\r\n            productTranslation.Details = request.Details;\r\n\r\n            return await db.SaveChangesAsync();\r\n        }\r\n\r\n        public async Task<bool> UpdatePrice(int productId, decimal newPrice)\r\n        {\r\n            var product = await db.Products.FindAsync(productId);\r\n            if (product == null)\r\n                throw new EShopException(\"Product can not found!\");\r\n\r\n            product.Price = newPrice;\r\n\r\n            return await db.SaveChangesAsync() > 0;\r\n        }\r\n\r\n        public async Task<bool> UpdateStock(int productId, int addedQuantity)\r\n        {\r\n            var product = await db.Products.FindAsync(productId);\r\n\r\n            if (product == null)\r\n                throw new EShopException(\"Product can not found!\");\r\n\r\n            product.Price += addedQuantity;\r\n\r\n            return await db.SaveChangesAsync() > 0;\r\n        }\r\n\r\n        private async Task<string> SaveFile(IFormFile file)\r\n        {\r\n            var originalFileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('\"');\r\n            var fileName = $\"{Guid.NewGuid()}{Path.GetExtension(originalFileName)}\";\r\n\r\n            await storageService.SaveFileAsync(file.OpenReadStream(), fileName);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/EShopSolution.Application/Catalog/Products/ManageProductService.cs b/EShopSolution.Application/Catalog/Products/ManageProductService.cs
--- a/EShopSolution.Application/Catalog/Products/ManageProductService.cs	(revision a9a3374108b6f9759140dac5f681e64ac3f79c3c)
+++ b/EShopSolution.Application/Catalog/Products/ManageProductService.cs	(date 1690123373188)
@@ -219,6 +219,7 @@
             var fileName = $"{Guid.NewGuid()}{Path.GetExtension(originalFileName)}";
 
             await storageService.SaveFileAsync(file.OpenReadStream(), fileName);
+            return storageService.GetFileUrl(fileName: fileName);
         }
     }
 }
\ No newline at end of file
